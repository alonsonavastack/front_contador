import { Component, signal } from '@angular/core';
import { Router, RouterLink } from '@angular/router';
import { AuthService } from '../../core/auth';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [CommonModule, RouterLink],
  templateUrl: './register.html',
})
export class Register {
  // Signals para el estado del formulario
  nombre = signal('');
  email = signal('');
  password = signal('');
  telefono = signal('');
  loading = signal(false);
  error = signal('');
  
  // Control del flujo de verificaci√≥n
  showOtpInput = signal(false);
  otpCode = signal('');
  verifyingOtp = signal(false);
  successMessage = signal('');
  
  // Para debugging
  debugInfo = signal('');

  constructor(
    private auth: AuthService,
    private router: Router
  ) {
    // Si ya est√° logueado, redirigir al dashboard
    if (this.auth.isLoggedIn()) {
      this.router.navigate(['/dashboard']);
    }
  }

  // M√©todos para actualizar los signals en cada input
  onNombreChange(event: Event) {
    this.nombre.set((event.target as HTMLInputElement).value);
  }

  onEmailChange(event: Event) {
    this.email.set((event.target as HTMLInputElement).value);
  }

  onPasswordChange(event: Event) {
    this.password.set((event.target as HTMLInputElement).value);
  }

  onTelefonoChange(event: Event) {
    this.telefono.set((event.target as HTMLInputElement).value);
  }

  onOtpChange(event: Event) {
    const value = (event.target as HTMLInputElement).value;
    // Solo permitir n√∫meros
    const numericValue = value.replace(/\D/g, '');
    this.otpCode.set(numericValue);
  }

  // M√©todo para enviar el formulario de registro
  submit(event: Event) {
    event.preventDefault();
    this.loading.set(true);
    this.error.set('');
    this.successMessage.set('');

    console.log('üìù Enviando registro:', {
      nombre: this.nombre(),
      email: this.email(),
      telefono: this.telefono()
    });

    this.auth.register(
      this.nombre(), 
      this.email(), 
      this.password(),
      this.telefono()
    ).subscribe({
      next: (res) => {
        console.log('‚úÖ Registro exitoso:', res);
        this.loading.set(false);
        this.successMessage.set(res.msg || '¬°C√≥digo enviado a tu WhatsApp! Por favor verifica tu n√∫mero.');
        this.showOtpInput.set(true);
        this.debugInfo.set(`Email: ${this.email()}, Tel√©fono: ${this.telefono()}`);
      },
      error: (e) => {
        console.error('‚ùå Error de registro:', e);
        this.error.set(e?.error?.msg || e?.error?.message || 'No se pudo completar el registro.');
        this.loading.set(false);
      }
    });
  }

  // M√©todo para verificar el c√≥digo OTP
  verifyOtp(event: Event) {
    event.preventDefault();
    
    if (!this.otpCode() || this.otpCode().length !== 6) {
      this.error.set('Por favor ingresa el c√≥digo completo de 6 d√≠gitos');
      return;
    }

    this.verifyingOtp.set(true);
    this.error.set('');
    this.successMessage.set('');

    console.log('üîê Verificando OTP:', {
      email: this.email(),
      code: this.otpCode(),
      codeLength: this.otpCode().length
    });

    this.auth.verifyOtp(this.email(), this.otpCode()).subscribe({
      next: (res) => {
        console.log('‚úÖ Verificaci√≥n exitosa:', res);
        this.verifyingOtp.set(false);
        this.successMessage.set(res.msg || '¬°Cuenta verificada exitosamente! Redirigiendo al login...');
        
        // Redirigir al login despu√©s de 2 segundos
        setTimeout(() => {
          this.router.navigate(['/login']);
        }, 2000);
      },
      error: (e) => {
        console.error('‚ùå Error al verificar OTP:', e);
        console.error('Detalles del error:', {
          status: e.status,
          statusText: e.statusText,
          error: e.error
        });
        
        let errorMsg = 'C√≥digo inv√°lido. Por favor intenta de nuevo.';
        
        if (e.error?.msg) {
          errorMsg = e.error.msg;
        } else if (e.status === 400) {
          errorMsg = 'El c√≥digo no es v√°lido o ya expir√≥.';
        } else if (e.status === 404) {
          errorMsg = 'No se encontr√≥ el c√≥digo. ¬øYa lo usaste? Solicita uno nuevo.';
        } else if (e.status === 429) {
          errorMsg = 'Demasiados intentos. Solicita un c√≥digo nuevo.';
        }
        
        this.error.set(errorMsg);
        this.verifyingOtp.set(false);
      }
    });
  }

  // M√©todo para reenviar el c√≥digo
  resendCode() {
    this.loading.set(true);
    this.error.set('');
    this.successMessage.set('');
    
    console.log('üîÑ Reenviando c√≥digo a:', this.telefono());
    
    this.auth.register(
      this.nombre(), 
      this.email(), 
      this.password(),
      this.telefono()
    ).subscribe({
      next: (res) => {
        console.log('‚úÖ C√≥digo reenviado:', res);
        this.loading.set(false);
        this.successMessage.set('¬°C√≥digo reenviado a tu WhatsApp!');
        // Limpiar el c√≥digo anterior
        this.otpCode.set('');
        setTimeout(() => this.successMessage.set(''), 3000);
      },
      error: (e) => {
        console.error('‚ùå Error al reenviar c√≥digo:', e);
        this.error.set(e?.error?.msg || e?.error?.message || 'No se pudo reenviar el c√≥digo.');
        this.loading.set(false);
      }
    });
  }
}
