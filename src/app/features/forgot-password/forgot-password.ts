import { Component, signal } from '@angular/core';
import { Router, RouterLink } from '@angular/router';
import { AuthService } from '../../core/auth';
import { CommonModule } from '@angular/common';

enum RecoveryStep {
  REQUEST = 'REQUEST',    // Solicitar c√≥digo
  VERIFY = 'VERIFY',      // Verificar c√≥digo OTP
  RESET = 'RESET'         // Establecer nueva contrase√±a
}

@Component({
  selector: 'app-forgot-password',
  standalone: true,
  imports: [CommonModule, RouterLink],
  templateUrl: './forgot-password.html',
})
export class ForgotPassword {
  // Enum para usar en el template
  RecoveryStep = RecoveryStep;

  // Paso actual del flujo
  currentStep = signal<RecoveryStep>(RecoveryStep.REQUEST);

  // Datos del formulario
  email = signal('');
  otpCode = signal('');
  newPassword = signal('');
  confirmPassword = signal('');

  // Estados de carga
  loading = signal(false);
  verifying = signal(false);
  resetting = signal(false);

  // Mensajes
  error = signal('');
  successMessage = signal('');

  // Datos temporales para el flujo
  tempToken = signal('');
  userId = signal('');
  telefono = signal('');

  constructor(
    private auth: AuthService,
    private router: Router
  ) {}

  // M√©todos para actualizar los signals
  onEmailChange(event: Event) {
    this.email.set((event.target as HTMLInputElement).value);
  }

  onOtpChange(event: Event) {
    const value = (event.target as HTMLInputElement).value;
    const numericValue = value.replace(/\D/g, '');
    this.otpCode.set(numericValue);
  }

  onNewPasswordChange(event: Event) {
    this.newPassword.set((event.target as HTMLInputElement).value);
  }

  onConfirmPasswordChange(event: Event) {
    this.confirmPassword.set((event.target as HTMLInputElement).value);
  }

  // Paso 1: Solicitar c√≥digo de recuperaci√≥n
  requestRecovery(event: Event) {
    event.preventDefault();
    this.loading.set(true);
    this.error.set('');
    this.successMessage.set('');

    console.log('üìß Solicitando recuperaci√≥n para:', this.email());

    this.auth.requestPasswordRecovery(this.email()).subscribe({
      next: (res) => {
        console.log('‚úÖ C√≥digo enviado:', res);
        this.loading.set(false);
        this.successMessage.set(res.msg || 'C√≥digo enviado a tu WhatsApp');
        this.telefono.set(res.telefono || '');
        this.currentStep.set(RecoveryStep.VERIFY);
      },
      error: (e) => {
        console.error('‚ùå Error al solicitar recuperaci√≥n:', e);
        this.error.set(e?.error?.msg || 'No se pudo enviar el c√≥digo');
        this.loading.set(false);
      }
    });
  }

  // Paso 2: Verificar c√≥digo OTP
  verifyCode(event: Event) {
    event.preventDefault();

    if (!this.otpCode() || this.otpCode().length !== 6) {
      this.error.set('Por favor ingresa el c√≥digo completo de 6 d√≠gitos');
      return;
    }

    this.verifying.set(true);
    this.error.set('');
    this.successMessage.set('');

    console.log('üîê Verificando c√≥digo:', this.otpCode());

    this.auth.verifyRecoveryOtp(this.email(), this.otpCode()).subscribe({
      next: (res) => {
        console.log('‚úÖ C√≥digo verificado:', res);
        this.verifying.set(false);
        this.successMessage.set(res.msg || 'C√≥digo verificado correctamente');
        this.tempToken.set(res.tempToken);
        this.userId.set(res.userId);
        this.currentStep.set(RecoveryStep.RESET);
      },
      error: (e) => {
        console.error('‚ùå Error al verificar c√≥digo:', e);
        let errorMsg = 'C√≥digo inv√°lido';

        if (e.error?.msg) {
          errorMsg = e.error.msg;
        } else if (e.status === 400) {
          errorMsg = 'El c√≥digo no es v√°lido o ya expir√≥';
        } else if (e.status === 429) {
          errorMsg = 'Demasiados intentos. Solicita un c√≥digo nuevo';
        }

        this.error.set(errorMsg);
        this.verifying.set(false);
      }
    });
  }

  // Paso 3: Restablecer contrase√±a
  resetPassword(event: Event) {
    event.preventDefault();

    // Validaciones
    if (this.newPassword().length < 6) {
      this.error.set('La contrase√±a debe tener al menos 6 caracteres');
      return;
    }

    if (this.newPassword() !== this.confirmPassword()) {
      this.error.set('Las contrase√±as no coinciden');
      return;
    }

    this.resetting.set(true);
    this.error.set('');
    this.successMessage.set('');

    console.log('üîë Restableciendo contrase√±a');

    this.auth.resetPassword(
      this.tempToken(),
      this.userId(),
      this.newPassword()
    ).subscribe({
      next: (res) => {
        console.log('‚úÖ Contrase√±a actualizada:', res);
        this.resetting.set(false);
        this.successMessage.set(res.msg || 'Contrase√±a actualizada exitosamente');

        // Redirigir al login despu√©s de 2 segundos
        setTimeout(() => {
          this.router.navigate(['/login']);
        }, 2000);
      },
      error: (e) => {
        console.error('‚ùå Error al restablecer contrase√±a:', e);
        this.error.set(e?.error?.msg || 'No se pudo actualizar la contrase√±a');
        this.resetting.set(false);
      }
    });
  }

  // Reenviar c√≥digo
  resendCode() {
    this.loading.set(true);
    this.error.set('');
    this.successMessage.set('');

    console.log('üîÑ Reenviando c√≥digo');

    this.auth.requestPasswordRecovery(this.email()).subscribe({
      next: (res) => {
        console.log('‚úÖ C√≥digo reenviado:', res);
        this.loading.set(false);
        this.successMessage.set('C√≥digo reenviado a tu WhatsApp');
        this.otpCode.set('');
        setTimeout(() => this.successMessage.set(''), 3000);
      },
      error: (e) => {
        console.error('‚ùå Error al reenviar c√≥digo:', e);
        this.error.set(e?.error?.msg || 'No se pudo reenviar el c√≥digo');
        this.loading.set(false);
      }
    });
  }

  // Volver al paso anterior
  goBack() {
    if (this.currentStep() === RecoveryStep.VERIFY) {
      this.currentStep.set(RecoveryStep.REQUEST);
      this.otpCode.set('');
    } else if (this.currentStep() === RecoveryStep.RESET) {
      this.currentStep.set(RecoveryStep.VERIFY);
      this.newPassword.set('');
      this.confirmPassword.set('');
    }
    this.error.set('');
    this.successMessage.set('');
  }
}
